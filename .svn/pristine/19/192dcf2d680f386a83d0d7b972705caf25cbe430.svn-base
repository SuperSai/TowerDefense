class MainLoadingView extends Laya.Sprite {

    public ui: ui.login.LoginSceneUI;

    constructor() {
        super();
        this.ui = new ui.login.LoginSceneUI();
        this.ui.probox.visible = false;
        this.addChild(this.ui);

        this.startCountDown();
        this.tweenAd();
    }

    private startCountDown(): void {
        Laya.timer.once(15e3, this, () => {
            this.ui.btnRefresh.visible = true;
            this.ui.btnRefresh.on(Laya.Event.CLICK, this, () => {
                this.prepareAccount();
            })
        })
    }

    private prepareAccount(): void {
        if (Laya.Browser.onMiniGame) {
            this.checkAuthority();
        } else {
            this.loadCache();
        }
    }

    private loadCache(complete?: Handler): void {
        userData.loadCache();
        GlobleData.Instance.setup(() => {
            userData.loadStorage(() => {
                this.loadHeroRes(() => {
                    this.startToLoad();
                })
            });
        })
    }

    private startToLoad(): void {
        this.ui.probox.visible = true;
        this.ui.btnStart.visible = false;
        if (Laya.Browser.onMiniGame) {
            this.loadSubPackages();
        } else {
            this.loadRemoteRes();
        }
    }

    private loadSubPackages(): void {
        const self = this;
        platform.startLoading((percentage: number) => {
            self.updateLoadingProgress(percentage, 1);
            if (percentage >= 100) {
                self.loadRemoteRes();
            }
        });
    }

    // private _time:number = 0;
    private loadRemoteRes(): void {
        // if(this._time == 0){
        //     this._time++;
        //     return;
        // }
        // let resList = BattleManager.Instance.getStartLoadPetData();
        // if(resList.length){
        // Laya.loader.load(resList,
        //     Handler.create(this, () => {
        //         GameView.Create(M.layer.renderLayer);
        //     }),
        //     Handler.create(this, (percentage: number) => {
        //         this.updateLoadingProgress(percentage * 100, 2);
        //     }, null, false));
        // } else {

        this.updateLoadingProgress(100, 2);
        HallScene.Create(M.layer.renderLayer);
        Laya.timer.clearAll(this);
        // }
    }

    /** 预加载模型资源 */
    private loadHeroRes(callback: any): void {
        let self = this;
        let resList = BattleManager.Instance.getStartLoadPetData();
        if (!resList || resList.length < 1) return callback && callback();
        console.log("@David 预加载怪物模型，数量：" + resList.length);
        Laya.loader.load(resList, Handler.create(null, (_res: any) => {
            callback && callback(_res);
        }), Handler.create(null, (_value: number) => {
            self.updateLoadingProgress(_value * 100, 2);
        }, null, false));
    }

    private checkAuthority(): void {
        let curStatus = 0;
        const rect: Rectangle = LayerManager.getRealStageRect(this.ui.btnStart);
        platform.authenticLogin((res: any) => {
            if (res) {
                new Token().verify(Laya.Handler.create(this, () => {
                    userData.versionCheck(() => {
                        if (res && res.userInfo) {
                            M.player.account = res.userInfo.nickName;
                            HttpManager.Instance.requestSaveWxUserinfoData(platform.encode(res.userInfo.nickName), res.userInfo.avatarUrl, res.userInfo.city, res.userInfo.gender);
                            this.loadCache();
                        }
                    });
                }));
            }
        }, {
                x: rect.x, y: rect.y,
                width: rect.width, height: rect.height
            }, (_status: number) => {
                if (curStatus == _status) {
                    return;
                }
                curStatus = _status;
                if (_status > 0 && _status < 3) {
                    //微信授权登录
                    EffectUtils.showWaitEffect("正在登录");
                } else if (_status == 3) {
                    //进入游戏
                    EffectUtils.stopWaitEffect();
                }
            });
    }

    private updateLoadingProgress(percentage: number, type: number): void {
        let percent: number = Math.floor(percentage);
        percent = percent < 0 ? 0 : percent > 100 ? 100 : percent;
        this.ui.lblProgress.visible = this.ui.progressBar.visible = this.ui.lblLoadingDesc.visible = percent < 100;
        this.ui.imgBar.width = 284 * percent / 100;
        this.ui.lblProgress.text = "" + percent + "%";
        if (type === 1) {
            // 加载小游戏分包
            this.ui.lblLoadingDesc.changeText("正在构建英雄世界... ");
        } else if (type === 2) {
            // 加载远程资源
            this.ui.lblLoadingDesc.changeText("正在召唤英雄... ");
        }
    }

    private tweenAd(): void {
        if (this.ui.imgStart) {
            console.log("@FREEMAN：广告屏切换开始");
            this.ui.imgStart.visible = true;
            Laya.Tween.to(this.ui.imgStart, { alpha: 0 }, 300, Laya.Ease.linearNone, Laya.Handler.create(this, () => {
                console.log("@FREEMAN：广告屏切换结束");
                this.ui.imgStart.destroy();
                this.prepareAccount();
            }), 1e3);
        }
    }
}
